datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?          @map("email_verified")
  image             String?
  encryptedPassword String?
  createdAt         DateTime           @default(now()) @map(name: "created_at")
  updatedAt         DateTime           @updatedAt @map(name: "updated_at")
  posts             Post[]
  accounts          Account[]
  sessions          Session[]
  accessTokens      OauthAccessToken[]
  accessGrants      OauthAccessGrant[]
  identities        UserIdentity[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model OauthAccessToken {
  id                    String           @id @default(dbgenerated())
  userId                String
  applicationId         String
  token                 String           @unique
  refreshToken          String?          @unique
  tokenExpiresAt        DateTime?        @db.Timestamp(6)
  refreshTokenExpiresAt DateTime?        @db.Timestamp(6)
  scopes                Json             @default("[]")
  createdAt             DateTime         @default(now()) @db.Timestamp(6)
  updatedAt             DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  application           OauthApplication @relation(fields: [applicationId], references: [id])
  user                  User             @relation(fields: [userId], references: [id])

  @@index([applicationId])
  @@index([userId])
}

model OauthAccessGrant {
  id                  String           @id @default(dbgenerated())
  userId              String
  applicationId       String
  token               String           @unique
  expiresAt           DateTime         @db.Timestamp(6)
  redirectUri         String
  codeChallengeMethod String?
  codeChallenge       String?
  scopes              Json             @default("[]")
  createdAt           DateTime         @default(now()) @db.Timestamp(6)
  updatedAt           DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  application         OauthApplication @relation(fields: [applicationId], references: [id])
  user                User             @relation(fields: [userId], references: [id])

  @@index([applicationId])
  @@index([userId])
}

model OauthApplication {
  id           String             @id @default(dbgenerated())
  name         String
  clientId     String             @unique
  clientSecret String
  redirectUris Json               @default("[]")
  scopes       Json               @default("[]")
  createdAt    DateTime           @default(now()) @db.Timestamp(6)
  updatedAt    DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  grants       Json               @default("[]")
  accessTokens OauthAccessToken[]
  accessGrants OauthAccessGrant[]
}

model UserIdentity {
  id        String   @id @default(dbgenerated())
  userId    String
  provider  String
  uid       String
  name      String?
  email     String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([provider, uid])
  @@index([userId])
}
